{"version":3,"sources":["../../source/controller/partner.controller.js"],"names":["insertPartners","req","res","cloudinary","uploader","upload","file","path","result","name","body","Partner","findOne","then","partner","json","msg","newPartner","logo","secure_url","cloud","public_id","savePartner","save","errorMessage","getPartners","find","partners","returnPartner","i","length","push","transform","getOnePartner","findById","params","id","deleteOnePartner","findByIdAndDelete","_id","partnerUpdated","updateOnePartner","image","console","log","newPartnerData","findByIdAndUpdate","new"],"mappings":"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","file":"partner.controller.js","sourcesContent":["import  Partner from '../models/partner.model';\nimport cloudinary from '../helper/cloudinary';\n\n// \"\"\"\"\"\"\"\"\"\" insert partners \"\"\"\"\"\"\"\"\"\"\"\"\"\"\nconst insertPartners = async (req, res) => {\n    let result = await cloudinary.uploader.upload(req.file.path);\n    let  name  = req.body.name;\n        try {\n            await Partner.findOne({name})\n            .then(partner =>{\n                if(partner) {\n                    return res.json({msg: 'partner already exists'})\n                }\n                else{\n                    const newPartner = new Partner({\n                        name: name,\n                        logo: result.secure_url,\n                        cloud: result.public_id\n                    });\n            \n                    const savePartner = newPartner.save();\n                    return res.json(savePartner);\n                }\n            })\n           \n            \n        } catch (error) {\n            return res.json({errorMessage: error});\n        }\n    }\n\n\n// \"\"\"\"\"\"\"\"\"\" list all partners \"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nconst getPartners = async (req, res) => {\n    try {\n        const partners = await Partner.find();\n        let returnPartner = [];\n        for (let i = 0; i < partners.length; i++){\n            returnPartner.push(partners[i].transform())\n        }\n        return res.json(returnPartner);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n// \"\"\"\"\"\"\"\"\"\" list one  partner \"\"\"\"\"\"\"\"\"\"\"\"\"\"\nconst getOnePartner = async (req, res) => {\n    try {\n        const partner = await Partner.findById(req.params.id);\n        return res.json(partner);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n// \"\"\"\"\"\"\"\"\"\" delete partner \"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nconst deleteOnePartner = async (req, res) => {\n    try {\n\n        const partnerUpdated = await Partner.findByIdAndDelete({_id:req.params.id});\n        return res.json(partnerUpdated);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n// \"\"\"\"\"\"\"\"\"\" update one partner by his id\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nconst updateOnePartner = async (req, res) => {\n    const name = req.body.name;\n    const image = req.file.path;\n    console.log(name,\" - \",image)\n    let result = await cloudinary.uploader.upload(image);\n    try {\n        const newPartnerData = {\n            name,\n            logo: result.secure_url\n        };\n\n        const partnerUpdated = await Partner.findByIdAndUpdate({_id:req.params.id}, newPartnerData, {new: true});\n        return res.json(partnerUpdated);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n }\n\n\n\n\nexport default {\n    insertPartners,\n    deleteOnePartner,\n    getOnePartner,\n    getPartners,\n    updateOnePartner\n}"]}