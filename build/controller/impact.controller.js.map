{"version":3,"sources":["../../source/controller/impact.controller.js"],"names":["getImpact","req","res","impactModel","find","then","returnImpact","i","impacts","length","push","transform","json","catch","errorMessage","error","getOneImpact","findById","params","id","insertImpact","body","title","description","p","file","path","cloudinary","uploader","upload","result","status","Warning","findOne","impact","newImpact","photo","secure_url","cloud_id","public_id","save","err","updateImpact","newImpactData","impactUpdated","findByIdAndUpdate","_id","new","deleteImpact","findByIdAndDelete","console","log"],"mappings":"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","file":"impact.controller.js","sourcesContent":["import impactModel from \"../models/impact.model\";\nimport cloudinary from '../helper/cloudinary';\n\n\n// get impacts\nconst getImpact = (req, res) => {\n   impactModel.find()\n   .then(impacts => {\n       let returnImpact = [];\n       for (let i = 0; i < impacts.length; i++) {\n           returnImpact.push(impacts[i].transform())\n       }\n\n       res.json(returnImpact)\n    })\n   .catch(err=> res.json({errorMessage: error}));\n}\n\n// get a particular impact\nconst getOneImpact = (req, res) => {\n    impactModel.findById(req.params.id)\n    .then(impacts => res.json(impacts))\n    .catch(err=> res.json({errorMessage: error}));\n}\n\n\nconst insertImpact = async (req, res) => {\n    const { title , description } = req.body;\n    const p = req.file.path;\n    const result = await cloudinary.uploader.upload(p);\n   \n    if(!title || !description || !p) return res.status(501).json({Warning: 'please fill all fields !!'});\n\n        impactModel.findOne({title})\n        .then(impact => {\n            if(impact){\n                return res.status(501).json({Warning: 'impact already exists'});\n            }\n            else{\n                const newImpact = new impactModel({\n                    title,\n                    description,\n                    photo: result.secure_url,\n                    cloud_id: result.public_id\n                });\n                return newImpact.save()\n                .then(impact => res.json(impact))\n                .catch(err => res.json(err));\n            }\n        })\n        \n}\n\n\n\n// update a impact\nconst updateImpact = async (req, res) => {\n    const { title , description } = req.body;\n    const p = req.file.path;\n    const result = await cloudinary.uploader.upload(p);\n    try {\n        const newImpactData = {\n            title,\n            description,\n            photo: result.secure_url\n        };\n\n        const impactUpdated = impactModel.findByIdAndUpdate({_id:req.params.id}, newImpactData, {new: true});\n        return res.json(impactUpdated);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n\n// delete one \nconst deleteImpact = (req,res) => {\n    const id = req.params.id;\n\n    impactModel.findByIdAndDelete({_id:id})\n    .then(impact=> res.json({i: {id:impact.id}}))\n    .catch(err => console.log(err));\n}\n\n\nexport default {\n    getImpact,\n    getOneImpact,\n    insertImpact,\n    updateImpact,\n    deleteImpact\n}"]}