{"version":3,"sources":["../../source/controller/product.controller.js"],"names":["req","res","namep","body","image","file","path","cloudinary","uploader","upload","result","Product","findOne","then","product","json","msg","newProduct","photo","secure_url","cloudinary_id","public_id","save","catch","err","insertProduct","getProducts","find","products","returnProduct","i","length","push","transform","errorMessage","getOneProduct","findById","params","id","updateProduct","name","newProductData","findByIdAndUpdate","_id","new","productUpdated","deleteOneProduct","findOneAndDelete"],"mappings":"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","file":"product.controller.js","sourcesContent":["import Product from '../models/product.model';\nimport cloudinary from '../helper/cloudinary';\n\n\n// ###### insert product in the database controller\n\nasync function insertProduct(req, res){\n   const  namep  = req.body.namep;\n   const image = req.file.path; \n    let result = await cloudinary.uploader.upload(image)\n   \n   \n     Product.findOne({namep})\n        .then(product =>{\n            if(product) {\n                return res.json({msg: 'product already exists !!!!!'})\n            }else{\n                \n                let newProduct = new Product({\n                    namep: namep,\n                    photo: result.secure_url,\n                    cloudinary_id: result.public_id\n                });\n        \n                newProduct.save()\n                .then(product=> {\n                    res.json(product)\n                });\n                \n            }\n        }\n        )\n        .catch(err=> res.json({err}));\n}\n\n\n// ############# get all products ######################\nconst getProducts = async (req, res) => {\n    try {\n        const products = await Product.find();\n        let returnProduct = [];\n        for (let i = 0; i < products.length; i++) {\n            returnProduct.push(products[i].transform())\n        }\n        return res.json(returnProduct);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n\n// ############## get one single product by its id ###################\n\nconst getOneProduct = async (req, res) => {\n    try {\n        const product = await Product.findById(req.params.id);\n        return res.json(product);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n\n\n// ############## edit one single product by its id #######\n\nconst updateProduct = async (req, res) => {\n     \n    try {\n        const name = req.body.namep;\n        const image = req.file.path;\n        let result = await cloudinary.uploader.upload(image);\n\n        const newProductData = {\n            name,\n            photo: result.secure_url\n        };\n\n        const productUpdated = await Product.findByIdAndUpdate(\n            {_id:req.params.id}, \n            newProductData, \n            {new: true}\n            );\n        return res.json(productUpdated);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n\n\n//##### delete a single product by its id ######\n\nconst deleteOneProduct = async (req,res)=>{\n    try {\n        const productUpdated = await Product.findOneAndDelete(\n            {_id:req.params.id}\n            );\n        return res.json(productUpdated);\n        \n    } catch (error) {\n        return res.json({errorMessage: error});\n    }\n}\n\n\n\nexport default {\n    insertProduct,\n    getOneProduct,\n    getProducts,\n    updateProduct,\n    deleteOneProduct\n}"]}