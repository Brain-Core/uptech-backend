{"version":3,"sources":["../../source/controller/team.controller.js"],"names":["getTeamMember","req","res","TeamModel","find","then","returnTeam","i","teams","length","push","transform","json","catch","MsgError","err","getOneTeamMember","id","params","findById","team","insertTeamMembers","body","completeName","address","email","phone","position","url","file","path","cloudinary","uploader","upload","result","status","Warning","findOne","msg","newTeam","avatar","secure_url","cloudi_id","public_id","save","updateTeamMember","upfield","findByIdAndUpdate","new","teamUpdate","deleteTeamMember","findByIdAndDelete"],"mappings":"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","file":"team.controller.js","sourcesContent":["\nimport TeamModel from '../models/team.model';\nimport cloudinary from '../helper/cloudinary';\n\n\n// get all team members \nconst getTeamMember = async (req,res)=>{\n    await TeamModel.find()\n    .then(teams => {\n        let returnTeam = [];\n        for(let i=0; i < teams.length; i++) {\n            returnTeam.push(teams[i].transform())\n        }\n        res.json(returnTeam)\n\n    })\n    .catch(err=> res.json({MsgError: err}))\n}\n\n// get one team member\n\nconst getOneTeamMember = async (req,res)=>{\n    const id = req.params.id\n    await TeamModel.findById(id)\n    .then(team => res.json(team))\n    .catch(err=> res.json({MsgError: err}))\n}\n\n// ++++++++++++++++++++ register team member in the database ++++++++++++++++++++++\nconst insertTeamMembers = async (req,res) =>{\n    const { completeName, address, email, phone,position} = req.body;\n    const url = req.file.path;\n    let result = await cloudinary.uploader.upload(url);\n\n    //validation, check if all fieal are filled\n\n    if(!completeName || !address || !email || !phone || !position || !url) return res.status(501).json(\n        {\n            Warning: 'All fields must be fill'\n        }\n        );\n    TeamModel.findOne({completeName})\n    .then(team => {\n        // check if the member is not exists yet, to not register him twice\n        if(team){\n            return res.json({msg: 'team member already exists'})\n        }else{\n            let newTeam = new TeamModel(\n                {\n                completeName, \n                address,\n                email,\n                phone,\n                position,\n                avatar: result.secure_url, \n                cloudi_id: result.public_id\n            });\n            newTeam.save()\n            .then(team => res.json(team))\n            \n            \n        }\n    })\n    .catch();\n    \n\n} \n\n\n\n// ++++++++++++++++++++ update one team member in the database ++++++++++++++++++++++\nconst updateTeamMember = async (req, res) => {\n    const { completeName, address, email, phone,position} = req.body;\n    const url = req.file.path\n    const result = await cloudinary.uploader.upload(url);\n    const id = req.params.id;\n    const upfield = {completeName, address, email, phone,position,avatar: result.secure_url};\n\n    const teamUpdate = await TeamModel.findByIdAndUpdate({id:id}, upfield, {new: true})\n    return res.json({\n        completeName: teamUpdate.completeName\n    })\n\n}\n\n\n\n// ++++++++++++++++++++ delete team member in the database ++++++++++++++++++++++\n\nconst deleteTeamMember = (req, res) => {\n    const id = req.params.id;\n    TeamModel.findByIdAndDelete({id:id})\n    .then(team => res.json({\n        team: {\n            id: team.id,\n            completeName: team.completeName\n        }\n    }))\n    .catch(err => res.json({MsgError: err}))\n}\n\n\n\n\nexport default {\n    getTeamMember,\n    getOneTeamMember,\n    insertTeamMembers,\n    updateTeamMember,\n    deleteTeamMember\n}"]}